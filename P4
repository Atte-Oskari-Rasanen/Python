File Modes in Python

Following are various modes in Python
Mode 	Description
'r' 	This is the default mode. It Opens file for reading.
'w' 	This Mode Opens file for writing.   -- this erases the contents of the file if there's any before opening it on python!
'x' 	Creates a new file. If file already exists, the operation fails.
'a' 	Open file in append mode.
If file does not exist, it creates a new file.
't' 	This is the default mode. It opens in text mode.
'b' 	This opens in binary mode.
'+' 	This will open a file for reading and writing (updating)


why do we need to readline() often before we start doing anything else with the opened file? 

Because: Use file.readlines() to create a list where each element is a line from the file
https://www.kite.com/python/answers/how-to-delete-a-line-from-a-file-in-python

python regex and match
https://www.youtube.com/watch?v=K8L6KVGG-7o
https://www.guru99.com/python-regular-expressions-complete-tutorial.html

you can assign multiple methods to one variable, they are divided based on .  
ds = line.replace('>', '').split()[0]




#%%
#Running exercise 1
#Your task in this exercise is to insert the information about the protein 
#description (hitDescription) from the blastx results to the fasta file. 

#malariablast = open('malaria.blastx.tab', 'r')
#malariafna= open('malaria.fna', 'r')
#output = open('malariablastedited.fna', 'w')

with open("malaria.blastx.tab",'r') as malariablast:
    data={}
    for a in malariablast:
        lineList = a.split("\t")   #spit makes the string into a list based on the delimiter, i.e. the tab
        if "null" not in lineList:                  #if line we're at doesn't equal to null, then keep it
            ids = lineList[0]
            pname = lineList[9]
            data[ids] = pname
            #print(data)   
    #, open("outputfile", "w") as output:


with open("malaria.fna", 'r') as malariafna:
    for b in malariafna:
        if b.startswith('>'):       
            malaline=b.replace('>', '').split('\t')[0]
            print(malaline)
    #remove the > in the line, get the 1st column,i.e the id
            if malaline in data:
                print(data[malaline])
                data[ids].append(malaline)
                output.write(malaline)
                print(malaline)
#output.close() 
#malariablast.close()
#malariafna.close()





ver2
with open("malaria.blastx.tab",'r') as malariablast:
    data={}
    for a in malariablast:
        lineList = a.split("\t")   #spit makes the string into a list based on the delimiter, i.e. the tab
        if "null" not in lineList:                  #if line we're at doesn't equal to null, then keep it
            ids = lineList[0]
            pname = lineList[9]
            data[ids] = pname
            #print(data)   
    #, open("outputfile", "w") as output:
            
with open("malaria.fna", 'r') as malariafna:
    Fasta = {}
    for c in malariafna:
            Fasta[c] = []
            
with open("malaria.fna", 'r') as malariafna:
    for b in Fasta:                #we want to match the IDs from two files
        if b.startswith('>'):           #find the line with IDs in fasta
            malaline=b.replace('>', '').split('\t')[0]  #remove > and split the line based on tabs, select the fist fraction
            #print(malaline) 
            
            if malaline in data:        #if this fraction found in blast data
                #print(malaline, data[malaline])
                Fasta[malanine] = data
                data[ids].append(malaline)   #can't append dictionaries to strings!
                #output.write(malaline)
                print(malaline)








#%%
with open("malaria.blastx.tab",'r') as malariablast:      #1
    data={}
    for a in malariablast:
        lineList = a.split("\t")        #split the list into parts
        if "null" not in lineList:             
            ids = lineList[0]           #select the first part(id)
            pname = lineList[9]         #select the protein name
            data[ids] = pname
            #print(data)   
            
with open("malaria.fna", 'r') as malariafna:   #2
    Fastadict = {}  
    Header = {}
    Header2 = []                            #create a dictionary for fasta file and a header
    for a in malariafna:
        a = a.replace('\n', '')        
        if a.startswith('>'):           #find the line with IDs in fasta
            fastaid = a.replace('>', '').split('\t')[0]
            Header[fastaid] = a 
        else:
            Fastadict[fastaid] = a
with open("malaria.fna", 'r') as malariafna, open("output.txt", "w") as output:               #3
    for b in malariafna:                #we want to match the IDs from blast and fasta files
        if b.startswith('>'):           #find the line with IDs in fasta
            malaline=b.replace('>', '').replace('\n', '').split('\t')[0]  #remove '>' and split the line based on tabs, select the fist part                                       
        #for line in Header:                  #going over each header         #4
        if malaline in data:  
            h = Header[malaline]+'\tprotein='+data[malaline]
            Header2.append(h)             #So im trying to make header and data as one, then replace this header with the id lines of fasta file and create a new file
                #print(Header2)
    for aline in Header2: 
        output.write(aline + '\n')
        aline=aline.replace('>', '')
        fileids=aline.split('\t')[0]
        output.write(Fastadict[fileids])
