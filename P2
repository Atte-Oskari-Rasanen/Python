You can split a string into a list with .split() method
s = input()
list = s.split()
print (list)
[] denotes a list, () denotes a tuple and {} denotes a dictionary.


Python has a built-in function called sorted, which will give you a sorted list from any iterable you feed it (such as a list ([1,2,3]); a dict ({1:2,3:4}, although it will just return a sorted list of the keys; a set ({1,2,3,4); or a tuple ((1,2,3,4))).

>>> x = [3,2,1]
>>> sorted(x)
[1, 2, 3]
>>> x
[3, 2, 1]

Lists also have a sort method that will perform the sort in-place (x.sort() returns None but changes the x object) .

>>> x = [3,2,1]
>>> x.sort()
>>> x
[1, 2, 3]




#Collection data types: iterables
#1
#%%
s = input("Give numbers: ")
l = s.split()
print (l)
combined = sum(l)
print (combined)



nt = set(['A', 'T','C','G'])
#%%
#2
import itertools

nt = 'ATCG'
codons = (set(itertools.permutations(nt,3)))
print (codons)
out = list(codons)
print (out)

#%%
#3
leucine = ['CUU', 'CUC', 'CUA', 'CUG']
for i in codons:
    if i == leucine:
        print(i)
#%%
#Collection data types dictionaries
#1
my_dict = {}
print(my_dict)
my_dict["apples"]=4
my_dict["pears"]=2
my_dict["oranges"]=2
print(my_dict)


my_dict = {"apples": 4, "pears": 2, "oranges": 2}
#2
my_dict["watermelon"]=1
my_dict["pears"]+=2
my_dict["oranges"]+=5
print(my_dict)
#3
for key, value in my_dict.items():
    print(key, ':', value)
#4

for i, j in my_dict.items(): 
    sorted_dict ={i:sorted(j)} 
    print(sorted_dict) 
#sorted_dict=sorted(my_dict)
#print(sorted_dict)
    
#sorted_dict=iter(sorted(my_dict.key()))
#print(sorted_dict)
